const asyncHandler = require("express-async-handler");
const { pool } = require("../database");
const { search } = require("../routes/loginRoutes");

const viewAdminRequests = asyncHandler(async (req, res) => {
    if (!req.user.isAdmin) {
        return res.redirect(
          "/error?type=403 Forbidden&message=You are not authorized to view this page."
        );
      }
    try {
        const query = "SELECT * FROM users WHERE adminRequest = 'pending'";
        const result = await pool.query(query);
        const users = result.rows;
        res.render("adminRequests", { users });
    } catch (error) {
        console.error("Error retrieving admin requests:", error);
        res.status(500).send("Internal Server Error");
    }    
});

const approveAdminRequests = asyncHandler(async (req, res) => {
    if (!req.user.isAdmin) {
        return res.redirect(
          "/error?type=403 Forbidden&message=You are not authorized to view this page."
        );
    }
    try {
        const { userId } = req.params;
        const query = "UPDATE users SET admin_request_status = 'approved', isAdmin = true WHERE id = $1";
        await pool.query(query, [userId]);
        res.redirect("/admin/requests");
        msg = "Admin request approved";
    } catch (error) {
        msg = "Internal Server Error!! Failed to approve admin request";
        console.error("Error approving admin request:", error);
        res.status(500).send("Internal Server Error");
    }
});

const rejectAdminRequests = asyncHandler(async (req, res) => {
    if (!req.user.isAdmin) {
        return res.redirect(
          "/error?type=403 Forbidden&message=You are not authorized to view this page."
        );
    }
    try {
        const { userId } = req.params;
        const query = "UPDATE users SET admin_request_status = 'rejected' WHERE id = $1";
        await pool.query(query, [userId]);
        res.redirect("/admin/requests");
        msg = "Admin request rejected";
    } catch (error) {
        msg = "Internal Server Error!! Failed to reject admin request";
        console.error("Error rejecting admin request:", error);
        res.status(500).send("Internal Server Error");
    }
});

const viewBooks = asyncHandler(async (req, res) => {
    if (!req.user.isAdmin) {
        return res.redirect(
          "/error?type=403 Forbidden&message=You are not authorized to view this page."
        );
    }
    try {
        const query = "SELECT b.*, c.checkout_date, c.checkin_date, u.username FROM books b LEFT JOIN checkouts c ON b.id = c.book_id LEFT JOIN users u ON c.user_id = u.id";
        const result = await pool.query(query);
        const books = result.rows;
        res.render("books", { books });
    } catch (error) {
        console.error("Error retrieving books:", error);
        res.status(500).send("Internal Server Error");
    }
});

const addBook = asyncHandler(async (req, res) => {
    if (!req.user.isAdmin) {
        return res.redirect(
          "/error?type=403 Forbidden&message=You are not authorized to view this page."
        );
    }
    try {
        const { title, author } = req.body;
        const query = "INSERT INTO books (title, author) VALUES ($1, $2)";
        await pool.query(query, [title, author]);
        res.redirect("/admin/books");
        msg = "Book added successfully";
    } catch (error) {
        msg = "Internal Server Error!! Failed to add book";
        console.error("Error adding book:", error);
        res.status(500).send("Internal Server Error");
    }
});

const deleteBook = asyncHandler(async (req, res) => {
    if (!req.user.isAdmin) {
        return res.redirect(
          "/error?type=403 Forbidden&message=You are not authorized to view this page."
        );
    }
    try {
        const { bookId } = req.params;
        const query = "DELETE FROM books WHERE id = $1";
        await pool.query(query, [bookId]);
        res.redirect("/admin/books");
        msg = "Book deleted successfully";
    } catch (error) {
        msg = "Internal Server Error!! Failed to delete book";
        console.error("Error deleting book:", error);
        res.status(500).send("Internal Server Error");
    }
});

const renderUpdateBookPage = asyncHandler(async (req, res) => {
    if (!req.user.isAdmin) {
      return res.redirect(
        "/error?type=403 Forbidden&message=You are not authorized to view this page."
      );
    }
  
    const bookId = req.params.id;
  
    try {
      const query = "SELECT * FROM books WHERE id = ?";
      const [rows] = await pool.query(query, [bookId]);
      const book = rows[0];
  
      res.render("updateBook", {
        user: req.user,
        book: book,
        message: "",
      });
    } catch (err) {
      return res.redirect(
        "/error?type=500 Internal Server Error&message=Failed to retrieve book details"
      );
    }
  });
  
  const adminUpdateBook = asyncHandler(async (req, res) => {
    if (!req.user.isAdmin) {
      return res.redirect(
        "/error?type=403 Forbidden&message=You are not authorized to view this page."
      );
    }
  
    const { title, author } = req.body;
    const queryBook = "SELECT * FROM books WHERE title = ?";
    const [rows] = await pool.query(queryBook, [title]);
    const book = rows[0];
    const query = "UPDATE books SET title = ?, author = ? WHERE id = ?";
    let message;
    try {
      await pool.query(query, [title, author, req.params.id]);
      message = `Book '${title}' updated successfully`;
    } catch (err) {
      res.status(500);
      message = "Failed to update book";
    }
  
    res.render("updateBook", {
      user: req.user,
      book: book,
      message: message,
    });
  });

  const searchBooks = asyncHandler(async (req, res) => {
    const { query } = req.query;
    const sqlQuery =
      "SELECT * FROM books WHERE title LIKE ? OR author LIKE ? AND available = true";
    try {
      const [results] = await pool.query(sqlQuery, [`%${query}%`, `%${query}%`]);
      if (!results) {
        res.send("No Books found");
      }
      res.json(results);
    } catch (err) {
      res.status(500).send("Failed to search books");
    }
  });

  module.exports = { 
    viewAdminRequests, 
    approveAdminRequests, 
    rejectAdminRequests, 
    viewBooks, 
    addBook, 
    deleteBook, 
    renderUpdateBookPage, 
    adminUpdateBook, 
    searchBooks 
};




